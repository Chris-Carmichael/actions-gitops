name: test

# to do:
# - helm fork (done)
# - add externalsecret schema (done)
# - add argocd schema (push to v2)
# - stretch goal: add one more tool (push to v2)
# - add conditions so workflow stops if changes don't effect workloads (push to v2)

on:
  push:
    branches: 
      - test2

jobs:
  kustomize-stuff:
    runs-on: ubuntu-latest

    steps:
    - name: checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: ansible install kube tools
      run: ansible-playbook ./playbooks/install-kube-tools.yaml

    - name: Add kustomize-remote ssh key
      uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.KUSTOMIZE_REMOTE_KEY }}

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v13.1

    - name: List all changed files
      run: |
        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          echo "$file was changed"
        done

    - name: capture kustomize dirs
      id: kust-dirs
      run: |
        KUST_DIRS=$(for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          DIR=$(dirname $file)
          if test -f $DIR/kustomization.yaml; then
            echo $DIR
          fi
        done)

        # create $KUST_DIRS env var - https://trstringer.com/github-actions-multiline-strings/
        echo "KUST_DIRS<<EOF" >> $GITHUB_ENV
        echo "$KUST_DIRS" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: loop through each kustomize directory and kustomize build
      run: |
        kust_dirs="${{ env.KUST_DIRS }}"

        for dir in $kust_dirs; do
          echo $dir
          kustomize build $dir
        done

    - name: verify manifests against kubeconform
      run: |
        kust_dirs="${{ env.KUST_DIRS }}"

        for dir in $kust_dirs; do
          echo $dir
          kustomize build $dir | kubeconform -summary -strict -schema-location \
            default -schema-location "schemas/{{ .ResourceKind }}_{{ .ResourceAPIVersion }}.json"
        done

    - name: get helm workload directories
      run: |
        HELM_DIRS=$(for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          DIR=$(dirname $file)

          # check for a Chart.yaml
          if test -f $DIR/Chart.yaml; then
            echo $DIR
          fi

          # check to see if basename folder is templates
          if [ "$(basename $DIR)" == "templates" ]; then
            #echo 'found templates directory'
            workload_dir=$(echo "$DIR" | sed -e "s/\/[^\/]*$//")
            #echo "$workload_dir"
            if test -f $workload_dir/Chart.yaml; then
              echo $workload_dir
            fi
          fi
        done)

        # create HELM_DIRS env var - https://trstringer.com/github-actions-multiline-strings/
        echo "HELM_DIRS<<EOF" >> $GITHUB_ENV
        echo "$HELM_DIRS" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: verify helm manifests against kubeconform
      run: |
        helm_dirs="${{ env.HELM_DIRS }}"

        for dir in $helm_dirs; do
          #echo $dir
          helm dependency build $dir
          #helm template $dir
          helm template $dir | kubeconform -summary -strict
        done

    #- uses: stefanzweifel/git-auto-commit-action@v4
    #  # commit back into branch
    #  with:
    #    commit_message: apply kustomize cfg fmt

    ## Maybe not tackle yet because of time to write our own policies
    #- name: Run conftest jobs
    #  run: |
    #    kustomize build workloads/hello | conftest test -p policy/deployment.rego -
    #    kustomize build workloads/sre-semver | conftest test -p policy/deployment.rego -
    #    helm template workloads/helm_boo | conftest

    ## We need to template out our manifests for this to work properly
    #- name: run kubeconform
    #  if: always()
    #  run: kubeconform -ignore-filename-pattern "kustomization.yaml|.argocd*" -strict -summary workloads/

    ## We need to template our manifests somewhere for this to work.
    #- name: kube-score
    #  # best practice & security audit
    #  if: always()
    #  run: find  ./manifests -type f  \( -name '*.yaml' -o  -name '*.yml' \) -exec kube-score score --kubernetes-version v1.20 -o ci {} \;

    #- name: run polaris audit
    #  if: always()
    #  run: polaris audit --format pretty --audit-path ./workloads

    # can't use private remote base because of key inception
    #- name: Run kubernetes tools
    #  uses: stefanprodan/kube-tools@v1.7.1
    #  with:
    #    command: |
    #      echo "Run conftest"
    #      kustomize build workloads/hello | conftest test -p policy/deployment.rego -
    #      #kustomize build workloads/sre-semver
    #      #kustomize build workloads/hello | conftest test -p test/policy -
    #      #echo "Run kubeval"
    #      #helmv3 template ./charts/test | kubeval --strict

    #- run: kustomize version

